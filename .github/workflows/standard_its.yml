# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Revised Integration Tests shared workflow
on:
  workflow_call:
    inputs:
      maven_projects:
        description: 'Maven projects to test'
        required: true
        type: string
      druid_use_default_value_for_null:
        required: false
        type: boolean
        default: true
      script:
        description: 'Which IT script to run'
        required: true
        type: string
      compile_jdk:
        description: 'Which JDK version to compile with'
        required: true
        type: string
      runtime_jdk:
        description: 'Which JDK version to use at runtime'
        required: true
        type: string
      use_indexer:
        description: 'Which indexer to use'
        required: true
        type: string

env:
  MVN: mvn -B
  MAVEN_SKIP: -P skip-static-checks -Dweb.console.skip=true -Dmaven.javadoc.skip=true
  MAVEN_SKIP_TESTS: -P skip-tests
  MAVEN_OPTS: -Xmx3000m
  JVM_RUNTIME: -Djvm.runtime=${{ inputs.runtime_jdk }}
  USE_INDEXER: ${{ inputs.use_indexer }}
  DRUID_USE_DEFAULT_VALUE_FOR_NULL: ${{ inputs.druid_use_default_value_for_null }}

jobs:
  run-processing-module-test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ inputs.compile_jdk }}
          cache: 'maven'
      - name: Run IT
        run: |
          unset _JAVA_OPTIONS
          # Set MAVEN_OPTS for Surefire launcher. Skip remoteresources to avoid intermittent connection timeouts when
          # resolving the SIGAR dependency.
          ${MVN} test -pl ${{ inputs.maven_projects }} ${MAVEN_SKIP} -Dremoteresources.skip=true -Ddruid.generic.useDefaultValueForNull=${{ inputs.druid_use_default_value_for_null }}
          sh -c "dmesg | egrep -i '(oom|out of memory|kill process|killed).*' -C 1 || exit 0"
          free -m
          ${MVN} -pl ${MAVEN_PROJECTS} jacoco:report
          if [[ "${GITHUB_REF_TYPE}" = "branch" ]]; then git remote set-branches --add origin ${GITHUB_REF_NAME} && git fetch; fi
          all_files="$(git diff --name-only origin/${GITHUB_REF_NAME}...HEAD | grep "\.java$" || [[ $? == 1 ]])"
          for f in ${all_files}; do echo $f; done  # for debugging
          if [[ "${MAVEN_PROJECTS}" = \!* ]]; then
          regex="${MAVEN_PROJECTS:1}";
          regex="^${regex//,\!/\\|^}";
          project_files="$(echo "${all_files}" | grep -v "${regex}" || [[ $? == 1 ]])";
          else
          regex="^${MAVEN_PROJECTS//,/\\|^}";
          project_files="$(echo "${all_files}" | grep "${regex}" || [[ $? == 1 ]])";
          fi
          for f in ${project_files}; do echo $f; done  # for debugging
          if [ -n "${project_files}" ]; then
          npm install @connectis/diff-test-coverage@1.5.3 && git diff origin/${GITHUB_REF_NAME}...HEAD -- ${project_files} | node_modules/.bin/diff-test-coverage \
          --coverage "**/target/site/jacoco/jacoco.xml" \
          --type jacoco \
          --line-coverage 50 \
          --branch-coverage 50 \
          --function-coverage 0 \
          --log-template "coverage-lines-complete" \
          --log-template "coverage-files-complete" \
          --log-template "totals-complete" \
          --log-template "errors" \
          -- || { printf "\n\n****FAILED****\nDiff code coverage check failed. To view coverage report, run 'mvn clean test jacoco:report' and open 'target/site/jacoco/index.html'\nFor more details on how to run code coverage locally, follow instructions here - https://github.com/apache/druid/blob/master/dev/code-review/code-coverage.md#running-code-coverage-locally\n\n" && false; }
          fi
          curl -o codecov.sh -s https://codecov.io/bash
          bash codecov.sh -X gcov
